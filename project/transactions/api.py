# Flask
from flask import jsonify

from datetime import datetime
from flask import request

# Models
from project.models import Transaction, Account
from project.transactions.transactions import create_transaction


def api_create_transaction(account_id):

    # Validate account exists
    account = Account.query.get(account_id)
    if not account:
        return jsonify({"status": "error", "detail": "Account not found"}), 400

    # Description, account_id, amount, category validation and error messages are automatically generated by swagger!
    print("I am here")
    print(request.json)
    required_fields = ["description", "amount", "category"]
    for field in required_fields:
        if transaction.get(field) is None:
            return jsonify({"status": "error", "detail": "This was unexpected. Swagger should have handled this..."}), 400



    # Format date_booked if provided
    date_booked = None
    if transaction.get("date_booked") != None:
        try:
            date_booked = datetime.fromisoformat(transaction.get("date_booked").replace('Z', '+00:00'))
        except:
            return jsonify({"status": "error", "detail": "Could not convert date_booked to datetime object"}), 400

    # Create transaction
    status, message, transaction_id = create_transaction(account=account,
                                        description=transaction.get("description"),
                                        amount=transaction.get("amount"),
                                        category=transaction.get("category"),
                                        date_booked=date_booked
                                        )

    if status == "success":
        transaction = Transaction.query.get(transaction_id)
        return jsonify({
        "status": "success",
        "detail": "Successfully created new transaction.",
        "description": transaction.description,
        "amount": transaction.amount,
        "saldo": transaction.saldo,
        "transaction_id": transaction.id,
        "category": transaction.category,
        "date_booked": transaction.date_booked
    }), 201

    else:
        return jsonify({"status": "error", "detail": message}), 400


# # ## API endpoints
# def transactions_to_json(transaction_list):
#     json_transactions = []
#     for transaction in transaction_list:
#         transaction_dict = {
#             "id": str(transaction.id),
#             "amount": str(transaction.amount),
#             "saldo": str(transaction.saldo),
#             "description": transaction.description,
#             "category": transaction.category,
#             "date_booked": transaction.date_booked.isoformat()
#         }
#         json_transactions.append(transaction_dict)
#     return json_transactions

# # Read all transactions
# def read_all():
#     return transactions_to_json(Transaction.query.all())

# # Read single transaction
# def read_one(id):
#     data = Transaction.query.get(id)
#     if data:
#         return transactions_to_json([data])
#     else:
#         abort(
#             404, f"Transaction with id {id} not found"
#         )
